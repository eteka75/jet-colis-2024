datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  nom           String
  prenom        String?
  bio           String?
  email         String          @unique
  dateOfBirth   DateTime?
  country       String?
  emailVerified DateTime?
  image         String?
  password      String
  isActive      Boolean         @default(false)
  profileId     String          @unique

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  Authenticator Authenticator[]
  accounts      Account[]
  sessions      Session[]
  userTarifsColis UserTarifsColis[]
  userTarifsCategorie UserTarifsCategorie[]
  trajets       Trajet[]
  Commandes     Commande[]
  reviews       Review[]
  sentMessages  ChatMessage[]   @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
  notifications Notification[]
  localisationTrajets LocalisationTrajet[]
  favoris       Favori[]
  preferences   Preference[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ################################################################################
// # AJOUT DES COMPLEMENTS
// ################################################################################

model TypeColis {
  id            String       @id @default(uuid())
  nom           String
  description   String?

  tarifsColis           TarifsColis[]
  userTarifsColis       UserTarifsColis[]
  trajetTypeColis       TrajetTypeColis[]
  categories            Categorie[]
  @@unique([nom])
}

model Categorie {
  id          String     @id @default(uuid())
  nom         String
  typeColisId String
  typeColis   TypeColis  @relation(fields: [typeColisId], references: [id])

  tarifsCategorie TarifsCategorie[]
  userTarifsCategorie UserTarifsCategorie[] // Ajout de la relation inverse
  trajetCategories TrajetCategorie[]
  
  @@unique([nom, typeColisId])
}

model TarifsColis {
  id            String   @id @default(uuid())
  description   String?
  prixKilo      Decimal @db.Decimal(10,2)

  typeColisId String
  typeColis       TypeColis @relation(fields: [typeColisId], references: [id])
  
  userTarifsColis UserTarifsColis[]
  commande        Commande[]
}

model TarifsCategorie {
  id            String   @id @default(uuid())
  description   String?
  prixKilo      Decimal @db.Decimal(10,2)

  categorieId String
  categorie   Categorie @relation(fields: [categorieId], references: [id])
  
  userTarifsCategorie UserTarifsCategorie[] // Ajout de la relation inverse
  commande            Commande[]
}

model UserTarifsColis {
  id              String   @id @default(uuid())
  prix            Decimal       @db.Decimal(10,2)
  typeColisId     String
  userId          String

  typeColis       TypeColis @relation(fields: [typeColisId], references: [id], map: "UserTarifsColis_typeColisId_fkey")
  user            User @relation(fields: [userId], references: [id], map: "UserTarifsColis_userId_fkey")
  tarifColis      TarifsColis @relation(fields: [typeColisId], references: [id], map: "UserTarifsColis_tarifsColisId_fkey")

  @@unique([typeColisId, userId])
}

model UserTarifsCategorie {
  id              String   @id @default(uuid())
  prix            Decimal       @db.Decimal(10,2)
  categorieId     String
  userId          String

  categorie       Categorie @relation(fields: [categorieId], references: [id], map: "UserTarifsCategorie_categorieId_fkey")
  user            User @relation(fields: [userId], references: [id], map: "UserTarifsCategorie_userId_fkey")
  tarifCategorie  TarifsCategorie @relation(fields: [categorieId], references: [id], map: "UserTarifsCategorie_tarifsCategorieId_fkey")

  @@unique([categorieId, userId])
}

model Trajet {
  id                  String   @id @default(uuid())
  titre               String
  lieuDepart          String
  lieuDestination     String
  description         String

  startLatitude       Float?
  startLongitude      Float?
  endLatitude         Float?
  endLongitude        Float?

  userId              String
  user                User    @relation(fields: [userId], references: [id])

  commandes           Commande[]
  trajetTypeColis     TrajetTypeColis[]
  trajetCategories    TrajetCategorie[]
  reviews             Review[]
  favoris             Favori[]
}

model TrajetTypeColis {
  id              String    @id @default(uuid())
  titre           String
  description     String
  maxKg           Float
  remainingKg     Float

  trajetId        String
  typeColisId     String

  trajets         Trajet      @relation(fields: [trajetId], references: [id])
  typeColis       TypeColis   @relation(fields: [typeColisId], references: [id])

  @@unique([trajetId, typeColisId])
}

model TrajetCategorie {
  id              String    @id @default(uuid())
  titre           String
  description     String
  maxKg           Float
  remainingKg     Float

  trajetId        String
  categorieId     String

  trajets         Trajet      @relation(fields: [trajetId], references: [id])
  categorie       Categorie   @relation(fields: [categorieId], references: [id])

  @@unique([trajetId, categorieId])
}

model Commande {
  id                  String   @id @default(uuid())
  qteCommande         Float
  totalPrix           Float

  trajetId            String
  userId              String
  typeColisId         String?
  categorieId         String?

  trajets Trajet     @relation(fields: [trajetId], references: [id])
  user User    @relation(fields: [userId], references: [id])
  trajetColis TarifsColis?   @relation(fields: [typeColisId], references: [id])
  trajetCategorie TarifsCategorie?   @relation(fields: [categorieId], references: [id])

  @@unique([trajetId, userId, typeColisId, categorieId])
}

model Review {
  id              String      @id   @unique
  rating          Int
  comment         String?
  createdAt       DateTime    @default(now())

  userId          String
  trajetId        String

  user            User @relation(fields: [userId], references: [id])
  trajet          Trajet      @relation(fields: [trajetId], references: [id])

  @@unique([userId, trajetId])
}

model ChatMessage {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  imageUrl    String?
  audioUrl    String?
  videoUrl    String?

  senderId    String
  receiveId   String
  sender      User @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User @relation("ReceivedMessages", fields: [receiveId], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  type        String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model LocalisationTrajet {
  id          String    @id @default(uuid())
  type        String?
  label       String
  adresse     String?
  latitude    Float?
  logitude    Float?

  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Favori {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())

  trajetId  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  trajet    Trajet   @relation(fields: [trajetId], references: [id])

  @@unique([userId, trajetId])
}

model Preference {
  id        String   @id @default(uuid())
  value     String
  key       String

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}
