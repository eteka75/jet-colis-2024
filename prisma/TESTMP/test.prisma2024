datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  nom         String
  prenom      String?
  bio         String?
  profile_id  String      
  isActive    Boolean     @default(false)
  // Optional for WebAuthn support
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Authenticator Authenticator[]
  userTarifsColis         UserTarifsColis[]
  trajets                 Trajet[]
  Commandes                Commande[]
  reviews                 Review[]        // Les avis laissés par l'utilisateur
  sentMessages            ChatMessage[]       @relation("SentMessages")
  receivedMessages        ChatMessage[]       @relation("ReceivedMessages")
  notifications           Notification[]  // Notifications pour l'utilisateur
  localisationTrajets     LocalisationTrajet[]
  favoris                 Favori[]
  preferences             Preference[]
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// ################################################################################
// # AJOUT DES COMPLEMENTS
// ################################################################################


model TypeColis{
  id            String   @id @default(uuid())
  nom           String
  description   String?
  
  tarifsColis           TarifsColis?
  userTarifsColis       UserTarifsColis[]
  trajetTypeColis       TrajetTypeColis[]
  @@unique([nom])
}
model TarifsColis {
  id            String   @id @default(uuid())
  description   String?
  prix          Decimal @db.Decimal(10,2)

  userTarifsColis UserTarifsColis[]
  commande Commande[]

  typeColisId String @unique
  TypeColis       TypeColis @relation(fields: [typeColisId], references: [id])
}
model UserTarifsColis{
  id              String   @id @default(uuid())
  prix            Decimal       @db.Decimal(10,2)
  // Clés secondaires
  typeColisId     String      
  userId          String      
  typeColis TypeColis[]
  // Les relations 
  user            User   @relation(fields: [userId], references: [id])
  tarifColis      TarifsColis   @relation(fields: [typeColisId],references: [id])
  // Critères de validation
  @@unique([typeColisId,userId])
}

model Trajet {
  id                  String   @id @default(uuid())
  titre               String
  lieuDepart          String
  lieuDestination     String
  description         String

  startLatitude       Float?           // Latitude du point de départ
  startLongitude      Float?           // Longitude du point de départ
  endLatitude         Float?           // Latitude du point d'arrivée
  endLongitude        Float?           // Longitude du point d'arrivée
 
  userId              String
  user                User    @relation(fields: [userId],references: [id])

  commandes           Commande[]  
  trajetTypeColis     TrajetTypeColis[]  
  reviews             Review[]
  favoris             Favori[]
}
model TrajetTypeColis {
  id              String    @id @default(uuid())
  titre           String
  description     String
  maxKg           Float // Capacité totale en kg
  remainingKg     Float //  Kg restant disponible
  
  trajetId        String
  typeColisId     String 

  trajets         Trajet      @relation(fields: [trajetId], references: [id])
  typeColis       TypeColis   @relation(fields: [typeColisId],references: [id])

  @@unique([trajetId,typeColisId])
}
model Commande {
  id                  String   @id @default(uuid())
  qteCommande         Float
  totalPrix           Float

  trajetId            String 
  userId              String //celui qui a commandé
  typeColisId         String 

  trajets Trajet     @relation(fields: [trajetId],references: [id])
  user User    @relation(fields: [userId],references: [id])
  trajetColis TarifsColis   @relation(fields: [typeColisId],references: [id])

  // @@unique([trajetId,userId,typeColisId])
}

model Review {
  id              String      @id   @unique
  rating          Int     // Note de 1 à 5
  comment         String? // Commentaire facultatif
  createdAt       DateTime    @default(now()) 

  userId          String
  trajetId        String
  
  user            User @relation(fields: [userId],references: [id])
  trajet          Trajet      @relation(fields: [trajetId],references: [id])

  @@unique([userId,trajetId])
}

model ChatMessage {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  imageUrl    String?  // URL de l'image
  audioUrl    String?  // URL du fichier audio
  videoUrl    String?  // URL du fichier vidéo

  senderId    String
  receiveId   String
  sender      User @relation("SentMessages",fields: [senderId],references: [id])
  receiver    User @relation("ReceivedMessages",fields: [receiveId],references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  type        String   // Type de notification (réservation, commentaire, etc.)
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model LocalisationTrajet {
  id          String    @id @default(uuid())
  type        String?    // Arrivé/Depart
  label       String
  adresse     String?
  latitude    Float?
  logitude    Float?
  
  userId      String 
  user        User @relation(fields: [userId],references: [id])
}

model Favori {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())

  trajetId  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  trajet    Trajet   @relation(fields: [trajetId], references: [id])

  @@unique([userId, trajetId]) 
}

model Preference {
  id        String   @id @default(uuid())
  value     String   // Valeur de la préférence
  key       String   // Clé pour la préférence (ex: "notifications", "theme")
  
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, key]) // Assure que chaque utilisateur a une seule valeur pour chaque clé
}